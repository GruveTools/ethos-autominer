#!/usr/bin/env php
<?php
/**
 * This script adapted by Japh & neokjames
 *
 * Original code by AllCrypto https://www.youtube.com/watch?v=vf0doK-j54g and http://textuploader.com/dl3w5
 */

global $config;
global $dry_run, $home_dir, $autominer_dir;

$dry_run = false;
$setup = false;
$force_coin = '';

$rig = gethostname();

for ($i = 0; $i < count($argv); $i++) {
	if ($argv[$i] == '--setup') {
		$setup = $argv[$i+1];
	}
	if ($argv[$i] == '--dry-run') {
		$dry_run = true;
	}
	if ($argv[$i] == '--force') {
		if (!empty($argv[$i+1])) {
			$force_coin = $argv[$i+1];
		}
	}
	if ($argv[$i] == '--unlock') {
		unlink($lock_file);
	}
}

$home_dir = ($dry_run ? './' : '/home/ethos/');
$autominer_dir = $home_dir . '.autominer/';
$lock_file = $autominer_dir . 'no-autoswitch';

echo ($dry_run ? "Dry run in progress...\r\n" : '');

// Switch to the ethos home directory
if(!$dry_run) {
	chdir($home_dir);
}

// If there's no scripts directory, make one
if(!file_exists($autominer_dir)) {
	mkdir($autominer_dir);
}
// If there's no configs directory, make one. (Though obviously no configs directory means no configs, so we won't get far.)
if(!file_exists($autominer_dir . 'configs/')) {
	mkdir($autominer_dir . 'configs/');
}

// Get the current hour
$hour = date('H', time());

if ($setup) {
	if (file_exists($autominer_dir . 'config.json')) {
		exit('You already have a config.json, please rename it to back it up before running setup.' . "\n");
	}

	$config = json_decode(file_get_contents($setup . 'config.sample.json'));

	echo "Please enter the symbol for the coin you're currently mining: ";
	$symbol = fgets(STDIN, 2048); // read the special file to get the user input from keyboard
	$symbol = trim($symbol);

	$setup_configs = [];
	$setup_cfg = new \stdClass();
	$setup_cfg->coin = strtoupper($symbol);
	$setup_cfg->config = strtolower($symbol) . '.conf';
	array_push($setup_configs, $setup_cfg);

	copy($home_dir . 'local.conf', $autominer_dir . 'configs/' . $setup_cfg->config);

	$config->configs = $setup_configs;

	echo "Please go to whattomine.com, enter your rig details, and press 'calculate', then copy and paste the very long web address here:\n";
	$whattomine_paste = fgets(STDIN, 2048);

	if(strpos($whattomine_paste, '.json') !== false) {
		$config->settings->whattomine_url = $whattomine_paste;
	} else {
		$config->settings->whattomine_url = str_replace('whattomine.com/coins', 'whattomine.com/coins.json', $whattomine_paste);
	}

	file_put_contents($autominer_dir . 'config.json', json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));

	exit("\n=> Setup complete.\n");
}

// Config files for all algos we'd like to allow switching between
if(!file_exists($autominer_dir . 'config.json')) {
	exit("Missing a config.json file, please use the config.sample.json file as a template.\r\n");
}

$config = json_decode(file_get_contents($autominer_dir . 'config.json'));

// Check there's no no-autoswitch file in the scripts directory, manually creating this file will stop switching
if(!file_exists($lock_file))
{
	// Get current profitability from whattomine, still not sure if the querystring parameters are used
	$data_coins = get_whattomine($config->settings->whattomine_url);
	$profits = false;

	if(isset($data_coins['coins']) && count($data_coins['coins']) > 0)
	{
		// Run through all coins returned by whattomine and get profitability of ones we're interested in
		foreach($data_coins['coins'] as $label => $coin)
		{
			$new_cfg = find_config($coin['tag']);
			if(!$new_cfg)
				continue; // Skip unsupported coins.
			if($coin['lagging'])
				continue; // Skip lagging coins.

			$tag = $coin['tag'];
			//$hash_rate = $coins[$tag]['hash_rate'];
			//$coin_id = $coin['id'];

			$profits[$tag] = floatval($coin['profitability']);

			/// Looks like the original author had plans to go deeper...
			//$json_coin = file_get_contents("http://whattomine.com/coins/$coin_id.json?hr=$hash_rate&p=0&fee=0.0&cost=0&hcost=0.0");
			//$data_coin = json_decode($json_coin, true);
			//$profits[$tag] = floatval($data_coin['btc_revenue']); // str_replace('$', '', $data_coin['revenue'])
		}
	}

	// Output list
	echo "Profits:\r\n";
	foreach($profits as $label => $profit) {
		echo "  " . $label . " -> " . $profit . "\r\n";
	}

	if($profits && count($profits) > 0)
	{
		// Sort by profit (reverse)
		uasort($profits, 'float_rsort');
		$new_coin = key($profits);
		$new_profit = current($profits);

		if (!empty($force_coin)) {
			echo " Forcing switch to " . $force_coin . "\r\n";
			$new_coin = $force_coin;
			file_put_contents($lock_file, $force_coin, LOCK_EX);
		}

		$new_cfg = find_config($new_coin);

		// Get current active coin
		$current_coin = '';
		if (file_exists($autominer_dir . 'current_coin.txt')) {
			$current_coin = file_get_contents($autominer_dir . 'current_coin.txt');
			$current_coin_mtime = filemtime($autominer_dir . 'current_coin.txt');
		}
		$current_cfg = find_config($current_coin);

		gather();

		// Check if new coin is same as current coin
		if($new_coin == $current_coin)
			return;

		// Begin duration thresholds checks, per coin or global

		$mine_duration = $config->settings->mine_duration;
		if(!empty($new_cfg->mine_duration)) {
			$mine_duration = $new_cfg->mine_duration;
		}

		$mine_duration_sec = $mine_duration * 60 * 60;
		$coin_duration_diff = time() - $current_coin_mtime;
		$coin_duration_diff_min = round($coin_duration_diff / 60);
		$hours = ($mine_duration == 1 ? 'hour' : 'hours');
		if( (!empty( $mine_duration )) && (empty($force_coin) )) {
			if($coin_duration_diff < $mine_duration_sec) {
				$noswitch_msg = "Current coin (" . $current_coin . ") has a minimum mining duration of " . human_time($mine_duration_sec) . ", not switching. " . human_time($coin_duration_diff) . " have lapsed.";
				echo " " . $noswitch_msg;
				writelog($noswitch_msg);
				return;
			}
		}
		// End duration threshold checks

		// Check profitability against threshold
		$coin_profit_diff = $profits[$new_coin] - $profits[$current_coin];
		if(($coin_profit_diff < $config->settings->switch_threshold) && (empty($force_coin)) && !empty($config->settings->switch_threshold)) {
			$noswitch_msg = "New coin (" . $new_coin . ") is " . $coin_profit_diff . "% more profitable than current coin (" . $current_coin . "), however does not meet the switch threshold (" . $config->settings->switch_threshold . "%).";
			echo " " . $noswitch_msg;
			writelog($noswitch_msg);
			return;
		}

		// Switch coin
		file_put_contents($autominer_dir . 'current_coin.txt', $new_coin, LOCK_EX);

		if($new_cfg->config != $current_cfg->config) {
			$output = '';
			if(!$dry_run) {
				$config_file = $new_cfg->config;
				copy($autominer_dir . 'configs/' . $config_file, $home_dir . 'local.conf');
				sleep(5);
				$output += shell_exec('/opt/ethos/bin/disallow 2>&1');
				sleep(5);
				$output += shell_exec('/opt/ethos/bin/minestop 2>&1');
				sleep(5);
				$output += shell_exec('/opt/ethos/bin/allow 2>&1');
			} else {
				$output += 'DRY RUN';
			}
		}

		// Log and alert the switch event
		$log_msg = "Switching to " . $new_coin . " for at least " . human_time($mine_duration_sec) . ". " . $new_coin . " is " . $coin_profit_diff . "% more profitable. Mined " . $current_coin . " for " . human_time($coin_duration_diff) . ".";
		writelog($log_msg,true);
	}
}

// Function for reverse order sorting
function float_rsort($a, $b) {
	if ($a == $b) {
		return 0;
	}
	return ($a > $b) ? -1 : 1;
}

function pushbullet($msg) {
	global $config;

	$data = json_encode(array(
		'type' => 'note',
		'title' => 'ethOS Autominer',
		'body' => $msg,
		//'device_iden' => 'YOUR_DEVICE_ID' // You can put a specific device ID here
	));

	$curl = curl_init();
	curl_setopt($curl, CURLOPT_URL, 'https://api.pushbullet.com/v2/pushes');
	curl_setopt($curl, CURLOPT_USERPWD, $config->settings->pushbullet->token);
	curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');
	curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'Content-Length: ' . strlen($data)]);
	curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curl, CURLOPT_HEADER, false);
	curl_exec($curl);
	curl_close($curl);
}

function pushover($msg) {
	global $config;

	$data = array(
		'token' => $config->settings->pushover->token,
		'user' => $config->settings->pushover->user,
		'title' => 'ethOS Autominer',
		'message' => $msg,
	);

	$curl = curl_init();
	curl_setopt($curl, CURLOPT_URL, 'https://api.pushover.net/1/messages.json');
	curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curl, CURLOPT_SAFE_UPLOAD, true);
	curl_exec($curl);
	curl_close($curl);
}

function writelog($message,$alert = false) {
	global $config, $autominer_dir, $rig;

	// If $alert is true, send an alert with this log message
	if($alert) {
		$alert_message = "[$rig] " . $message;
		if (!empty($config->settings->pushbullet->token)) {
			pushbullet($alert_message);
		}
		if (!empty($config->settings->pushover->token) && !empty($config->settings->pushover->user)) {
			pushover($alert_message);
		}
	}
	// Write to switcher.log including timestamp
	$log_message = "[$rig] " . date('m/d/Y H:i:s') . " - " . $message;
	file_put_contents($autominer_dir . 'switcher.log', $log_message . "\r\n", FILE_APPEND | LOCK_EX);
}

function get_whattomine($url) {
	global $autominer_dir;

	$cache_hash = $autominer_dir . md5($url) . '.cache';
	$json_coins = '';

	if (file_exists($cache_hash) && (date('U') - filemtime($cache_hash) < 300)) {
		$json_coins = file_get_contents($cache_hash);
	} else {
		$json_coins = file_get_contents($url);
		file_put_contents($cache_hash, $json_coins, LOCK_EX);
	}

	$data_coins = json_decode($json_coins, true);

	return $data_coins;
}

function gather() {
	global $autominer_dir, $rig;
	$gatherData = null;

	$timestamp = date('U');

	// Create / Load database for stats
	if (!file_exists($autominer_dir . 'db.json')) {
		$gatherData = json_decode('{}');
	} else {
		$gatherData = json_decode(file_get_contents($autominer_dir . 'db.json'));
	}

	// Retrieve ethOS stats
	$stats_output = shell_exec('/opt/ethos/bin/show stats');

	$stats_lines = explode("\n", $stats_output);

	if (!is_array($gatherData->stats)) {
		$gatherData->stats = [];
	}

	// Process stats and add to database
	$stat = new \stdClass();
	$stat->timestamp = $timestamp;
	$previous_key = '';
	$key = '';
	$previous_val = '';
	for ($i = 0; $i < count($stats_lines); $i++) {
		$data = explode(': ', $stats_lines[$i]);

		if (empty(trim($data[0])) && empty(trim($data[1])))
			continue;

		if (empty($data[1])) {
			$data[1] = $data[0];
			$data[0] = '';
		}

		if (!empty(trim($data[0]))) {
			$key = trim($data[0]);
			$previous_key = $key;
			$val = trim($data[1]);
			$previous_val = $val;
		} else {
			$key = $previous_key;
			if (is_array($stat->data->$key)) {
				$val = $stat->data->$key;
				array_push($val, trim($data[1]));
			} else {
				$val = [];
				array_push($val, $previous_val);
				array_push($val, trim($data[1]));
			}
		}
		if (empty($stat->data)) {
			$stat->data = new \stdClass();
		}
		$stat->data->$key = $val;
	}
	array_push($gatherData->stats, $stat);

	// If the first stat is more than 1 week old, remove it. Only keeping 1 week of data.
	if ($timestamp - $gatherData->stats[0]->timestamp > 604800) {
		array_shift($gatherData->stats);
	}

	// Save to file
	file_put_contents($autominer_dir . 'db.json', json_encode($gatherData, JSON_PRETTY_PRINT), LOCK_EX);
}

function find_config($tag) {
	global $config;

	$o = false;

	foreach($config->configs as $c => $d) {
		if ($d->coin == $tag) {
			$o = $d;
		}
	}

	return $o;
}

function human_time($seconds) {
	$s = $seconds % 60;
	$m = floor(($seconds % 3600) / 60);
	$h = floor(($seconds % 86400) / 3600);
	$d = floor($seconds / 86400);

	$output = '';
	$output .= (!empty($d) ? $d . ' day' . ($d == 1 ? '' : 's') . ' ' : '');
	$output .= (!empty($h) ? $h . ' hour' . ($h == 1 ? '' : 's') . ' ' : '');
	$output .= (!empty($m) ? $m . ' minute' . ($m == 1 ? '' : 's') . ' ' : '');
	$output .= (!empty($s) ? $s . ' second' . ($s == 1 ? '' : 's') : '');

	return trim($output);
}
